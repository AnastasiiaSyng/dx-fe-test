{"version":3,"sources":["components/RepoContributorsComponent.js","components/RepoComponent.js","components/ReposListComponent.js","App.js","reportWebVitals.js","index.js"],"names":["RepoContributorComponent","login","contributions","avatar_url","src","alt","width","height","RepoComponent","name","description","language","pushed_at","fork","useState","contributors","setContributors","show","setShow","octokit","Octokit","auth","process","a","request","owner","repo","result","data","getData","prevState","length","GetGitHubContributors","className","substring","onClick","map","id","categoriesProps","ReposListComponent","setData","org","useEffect","GetGitHubRepos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAeeA,MAbf,YAAyE,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,WACtD,OACI,gCACI,uBACA,+BACI,6BAAI,qBAAKC,IAAKD,EAAYE,IAAI,SAASC,MAAM,KAAKC,OAAO,SACzD,6DAAgCN,KAChC,iDAAoBC,YC6CrBM,MAjDf,YAA4E,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,KAAQ,EAEjCC,mBAAS,IAFwB,mBAElEC,EAFkE,KAEpDC,EAFoD,OAGjDF,oBAAS,GAHwC,mBAGlEG,EAHkE,KAG5DC,EAH4D,KAOnEC,EAAU,IAAIC,IAAQ,CAAEC,KAFhBC,6CAL2D,4CASzE,4BAAAC,EAAA,sEACuBJ,EAAQK,QAAQ,yCAA0C,CAC7EC,MAAO,WACPC,KAAMjB,IAHV,OACQkB,EADR,OAKEX,EAAgBW,EAAOC,MALzB,4CATyE,sBAiBzE,SAASC,IACLX,GAAQ,SAAAY,GAAS,OAAKA,KAEM,IAAxBf,EAAagB,QApBoD,mCAqBnEC,GAIN,OACE,sBAAKC,UAAU,YAAf,UACE,uBACA,+BACE,8CAAiBxB,KACjB,+CAAkBC,KAClB,kEAAqCC,KACrC,+CAAkBC,EAAUsB,UAAU,EAAE,OACvCrB,EAAO,4CAAsB,QAEhC,wBAAQoB,UAAU,SAASE,QAAS,kBAAMN,KAA1C,8BAEA,8BACKd,EAAagB,OAAS,GAAKd,EACzBF,EAAaqB,KAAI,gBAAEC,EAAF,EAAEA,GAAOC,EAAT,6BAClB,cAAE,EAAF,eAAwCA,GAARD,MAChC,WCZGE,MA7Bf,WAEE,IAF6B,EAILzB,mBAAS,IAJJ,mBAItBc,EAJsB,KAIhBY,EAJgB,KAKvBrB,EAAU,IAAIC,IAAQ,CAAEC,KAHhBC,6CAFe,4CAW7B,4BAAAC,EAAA,sEACwBJ,EAAQK,QAAQ,wBAAyB,CAC7DiB,IAAK,aAFT,OACQd,EADR,OAIEa,EAAQb,EAAOC,MAJjB,4CAX6B,sBAkB7B,OAXAc,qBAAW,YAPkB,mCAQ3BC,KACC,IAUD,8BACGf,EAAKQ,KAAI,gBAAEC,EAAF,EAAEA,GAAOC,EAAT,6BACR,cAAE,EAAF,eAA8BA,GAARD,SCjBfO,MANf,WACE,OACE,cAAE,EAAF,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6382f5d.chunk.js","sourcesContent":["import React from 'react'\n\nfunction RepoContributorComponent({ login, contributions, avatar_url }) {\n    return (\n        <div>\n            <hr/>\n            <ul>\n                <li><img src={avatar_url} alt='avatar' width=\"50\" height=\"50\"></img></li>\n                <li>Contributiors Githun name: {login}</li>\n                <li>Contributions: {contributions}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default RepoContributorComponent","import React, { useState }  from 'react';\nimport { Octokit } from \"@octokit/core\";\nimport RepoContributorComponent from './RepoContributorsComponent'\n\n\nfunction  RepoComponent ({ name, description, language, pushed_at, fork }) {\n\n  const [contributors, setContributors] = useState([]);\n  const [show, setShow] = useState(false)\n\n  const token = process.env.REACT_APP_API_KEY\n\n  const octokit = new Octokit({ auth: token });\n\n  async function GetGitHubContributors() {\n    const result = await octokit.request('GET /repos/{owner}/{repo}/contributors', {\n      owner: \"getndazn\",\n      repo: name\n    })\n    setContributors(result.data)\n  } \n\n  function getData() {\n      setShow(prevState => !prevState)\n\n      if (contributors.length === 0) {\n        GetGitHubContributors()\n      }\n  }\n\n  return (\n    <div className='container'>\n      <hr/>\n      <ul>\n        <li> Repo name: {name}</li>\n        <li>Description: {description}</li>\n        <li>Repo main programming language: {language}</li>\n        <li>Last update: {pushed_at.substring(0,10)}</li>\n        {fork ? <li>It is fork</li> : null}\n      </ul>\n      <button className='button' onClick={() => getData()}>See contributors</button>\n\n      <div>\n        { (contributors.length > 0 && show)\n          ?  contributors.map(({id, ...categoriesProps}) => (\n            < RepoContributorComponent key={id} {...categoriesProps} />)) \n          : null\n        }\n      </div>\n     \n    </div>\n  )\n}\n\nexport default RepoComponent\n\n","import { Octokit } from \"@octokit/core\";\nimport React, { useState, useEffect } from 'react';\nimport RepoComponent from './RepoComponent'\n\n\nfunction  ReposListComponent() {\n\n  const token = process.env.REACT_APP_API_KEY\n\n  const [data, setData] = useState([]);\n  const octokit = new Octokit({ auth: token });\n  \n  useEffect( () => {\n    GetGitHubRepos()\n  }, [])\n\n  async function GetGitHubRepos() {\n    const result =  await octokit.request('GET /orgs/{org}/repos', {\n      org: 'getndazn'\n    })\n    setData(result.data);\n  } \n\n  return (\n    <div>\n      {data.map(({id, ...categoriesProps })=> (\n        < RepoComponent  key={id} {...categoriesProps}/> \n      ))}\n    </div>\n  );\n}\n\n\n\nexport default ReposListComponent\n\n","import React from 'react';\nimport ReposListComponent from './components/ReposListComponent'\n\nfunction  App () {\n  return (\n    < ReposListComponent />\n  )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}